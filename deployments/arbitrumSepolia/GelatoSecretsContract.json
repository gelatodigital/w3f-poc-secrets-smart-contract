{
  "address": "0x56593B957dD67D9fA64d443d03FB9efe33d6B7fc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_automate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "CounterTaskCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INTERVAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "automate",
      "outputs": [
        {
          "internalType": "contract IAutomate",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "count",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_web3FunctionHash",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_web3FunctionArgsHex",
          "type": "bytes"
        }
      ],
      "name": "createTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dedicatedMsgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "depositFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato1Balance",
      "outputs": [
        {
          "internalType": "contract IGelato1Balance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastExecuted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taskId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0552b31397477cd39c8cc9284439575a686bcf247c55a39386f4e574d1d26efd",
  "receipt": {
    "to": null,
    "from": "0x23e359eCAB56210f4b8B559218C4d27A85b052b8",
    "contractAddress": "0x56593B957dD67D9fA64d443d03FB9efe33d6B7fc",
    "transactionIndex": 1,
    "gasUsed": "10583777",
    "logsBloom": "0x
    "blockHash": "0xf2ee8f8d7b7ddd61d7d3bf34d35384a38e7795d7662a8430d82fd3e5c30594b9",
    "transactionHash": "0x0552b31397477cd39c8cc9284439575a686bcf247c55a39386f4e574d1d26efd",
    "logs": [],
    "blockNumber": 77071627,
    "cumulativeGasUsed": "10583777",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A6C106ae13B558BB9E2Ec64Bd2f1f7BEFF3A5E0",
    "0x23e359eCAB56210f4b8B559218C4d27A85b052b8"
  ],
  "numDeployments": 2,
  "solcInputHash": "fa7fa6c4c305d169d4e9dbe27daee5fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_automate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"CounterTaskCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"automate\",\"outputs\":[{\"internalType\":\"contract IAutomate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_web3FunctionHash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_web3FunctionArgsHex\",\"type\":\"bytes\"}],\"name\":\"createTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dedicatedMsgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"depositFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato1Balance\",\"outputs\":[{\"internalType\":\"contract IGelato1Balance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastExecuted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{\"isValidSignature(bytes32,bytes)\":{\"details\":\"Should return whether the signature provided is valid for the provided data\",\"params\":{\"hash\":\"Hash of the data to be signed\",\"signature\":\"Signature byte array associated with _data\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoSecretsContract.sol\":\"GelatoSecretsContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/GelatoAutomate/AutomateModuleHelper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./Types.sol\\\";\\r\\n\\r\\nabstract contract AutomateModuleHelper {\\r\\n    function _resolverModuleArg(\\r\\n        address _resolverAddress,\\r\\n        bytes memory _resolverData\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return abi.encode(_resolverAddress, _resolverData);\\r\\n    }\\r\\n\\r\\n    function _proxyModuleArg() internal pure returns (bytes memory) {\\r\\n        return bytes(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _singleExecModuleArg() internal pure returns (bytes memory) {\\r\\n        return bytes(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function _web3FunctionModuleArg(\\r\\n        string memory _web3FunctionHash,\\r\\n        bytes memory _web3FunctionArgsHex\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return abi.encode(_web3FunctionHash, _web3FunctionArgsHex);\\r\\n    }\\r\\n\\r\\n    function _timeTriggerModuleArg(uint128 _start, uint128 _interval)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory triggerConfig = abi.encode(_start, _interval);\\r\\n\\r\\n        return abi.encode(TriggerType.TIME, triggerConfig);\\r\\n    }\\r\\n\\r\\n    function _cronTriggerModuleArg(string memory _expression)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        bytes memory triggerConfig = abi.encode(_expression);\\r\\n\\r\\n        return abi.encode(TriggerType.CRON, triggerConfig);\\r\\n    }\\r\\n\\r\\n    function _eventTriggerModuleArg(\\r\\n        address _address,\\r\\n        bytes32[][] memory _topics,\\r\\n        uint256 _blockConfirmations\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory triggerConfig = abi.encode(\\r\\n            _address,\\r\\n            _topics,\\r\\n            _blockConfirmations\\r\\n        );\\r\\n\\r\\n        return abi.encode(TriggerType.EVENT, triggerConfig);\\r\\n    }\\r\\n\\r\\n    function _blockTriggerModuleArg() internal pure returns (bytes memory) {\\r\\n        bytes memory triggerConfig = abi.encode(bytes(\\\"\\\"));\\r\\n\\r\\n        return abi.encode(TriggerType.BLOCK, triggerConfig);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x6fe90ce16aafc7bdfdb7f849f913424a40aa93ca98144c15126b6e9108b544d9\",\"license\":\"UNLICENSED\"},\"contracts/GelatoAutomate/AutomateReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Types.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Inherit this contract to allow your smart contract to\\r\\n * - Make synchronous fee payments.\\r\\n * - Have call restrictions for functions to be automated.\\r\\n */\\r\\n// solhint-disable private-vars-leading-underscore\\r\\nabstract contract AutomateReady {\\r\\n    IAutomate public immutable automate;\\r\\n    address public immutable dedicatedMsgSender;\\r\\n    address private immutable feeCollector;\\r\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n    /**\\r\\n     * @dev\\r\\n     * Only tasks created by _taskCreator defined in constructor can call\\r\\n     * the functions with this modifier.\\r\\n     */\\r\\n    modifier onlyDedicatedMsgSender() {\\r\\n        require(msg.sender == dedicatedMsgSender, \\\"Only dedicated msg.sender\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev\\r\\n     * _taskCreator is the address which will create tasks for this contract.\\r\\n     */\\r\\n    constructor(address _automate, address _taskCreator) {\\r\\n        automate = IAutomate(_automate);\\r\\n        IGelato gelato = IGelato(IAutomate(_automate).gelato());\\r\\n\\r\\n        feeCollector = gelato.feeCollector();\\r\\n\\r\\n        address proxyModuleAddress = IAutomate(_automate).taskModuleAddresses(\\r\\n            Module.PROXY\\r\\n        );\\r\\n\\r\\n        address opsProxyFactoryAddress = IProxyModule(proxyModuleAddress)\\r\\n            .opsProxyFactory();\\r\\n\\r\\n        (dedicatedMsgSender, ) = IOpsProxyFactory(opsProxyFactoryAddress)\\r\\n            .getProxyOf(_taskCreator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev\\r\\n     * Transfers fee to gelato for synchronous fee payments.\\r\\n     *\\r\\n     * _fee & _feeToken should be queried from IAutomate.getFeeDetails()\\r\\n     */\\r\\n    function _transfer(uint256 _fee, address _feeToken) internal {\\r\\n        if (_feeToken == ETH) {\\r\\n            (bool success, ) = feeCollector.call{value: _fee}(\\\"\\\");\\r\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\r\\n        } else {\\r\\n            SafeERC20.safeTransfer(IERC20(_feeToken), feeCollector, _fee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getFeeDetails()\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 fee, address feeToken)\\r\\n    {\\r\\n        (fee, feeToken) = automate.getFeeDetails();\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdd2635c1bcca9597ebed6eab06be88067726aa041ede04f8dd16ac83c4831f02\",\"license\":\"UNLICENSED\"},\"contracts/GelatoAutomate/AutomateTaskCreator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.14;\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./AutomateReady.sol\\\";\\r\\nimport {AutomateModuleHelper} from \\\"./AutomateModuleHelper.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Inherit this contract to allow your smart contract\\r\\n * to be a task creator and create tasks.\\r\\n */\\r\\n//solhint-disable const-name-snakecase\\r\\n//solhint-disable no-empty-blocks\\r\\nabstract contract AutomateTaskCreator is AutomateModuleHelper, AutomateReady {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IGelato1Balance public constant gelato1Balance =\\r\\n        IGelato1Balance(0x7506C12a824d73D9b08564d5Afc22c949434755e);\\r\\n\\r\\n    constructor(address _automate) AutomateReady(_automate, address(this)) {}\\r\\n\\r\\n    function _depositFunds1Balance(\\r\\n        uint256 _amount,\\r\\n        address _token,\\r\\n        address _sponsor\\r\\n    ) internal {\\r\\n        if (_token == ETH) {\\r\\n            ///@dev Only deposit ETH on goerli for now.\\r\\n            require(block.chainid == 5, \\\"Only deposit ETH on goerli\\\");\\r\\n            gelato1Balance.depositNative{value: _amount}(_sponsor);\\r\\n        } else {\\r\\n            ///@dev Only deposit USDC on polygon for now.\\r\\n            require(\\r\\n                block.chainid == 137 &&\\r\\n                    _token ==\\r\\n                    address(0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174),\\r\\n                \\\"Only deposit USDC on polygon\\\"\\r\\n            );\\r\\n            IERC20(_token).approve(address(gelato1Balance), _amount);\\r\\n            gelato1Balance.depositToken(_sponsor, _token, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _createTask(\\r\\n        address _execAddress,\\r\\n        bytes memory _execDataOrSelector,\\r\\n        ModuleData memory _moduleData,\\r\\n        address _feeToken\\r\\n    ) internal returns (bytes32) {\\r\\n        return\\r\\n            automate.createTask(\\r\\n                _execAddress,\\r\\n                _execDataOrSelector,\\r\\n                _moduleData,\\r\\n                _feeToken\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _cancelTask(bytes32 _taskId) internal {\\r\\n        automate.cancelTask(_taskId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x27888f9c86c45298b7d5e331262732c9c3af43ed8c454d8a38d14004b3100c98\",\"license\":\"UNLICENSED\"},\"contracts/GelatoAutomate/Types.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nenum Module {\\r\\n    RESOLVER,\\r\\n    DEPRECATED_TIME,\\r\\n    PROXY,\\r\\n    SINGLE_EXEC,\\r\\n    WEB3_FUNCTION,\\r\\n    TRIGGER\\r\\n}\\r\\n\\r\\nenum TriggerType {\\r\\n    TIME,\\r\\n    CRON,\\r\\n    EVENT,\\r\\n    BLOCK\\r\\n}\\r\\n\\r\\nstruct ModuleData {\\r\\n    Module[] modules;\\r\\n    bytes[] args;\\r\\n}\\r\\n\\r\\ninterface IAutomate {\\r\\n    function createTask(\\r\\n        address execAddress,\\r\\n        bytes calldata execDataOrSelector,\\r\\n        ModuleData calldata moduleData,\\r\\n        address feeToken\\r\\n    ) external returns (bytes32 taskId);\\r\\n\\r\\n    function cancelTask(bytes32 taskId) external;\\r\\n\\r\\n    function getFeeDetails() external view returns (uint256, address);\\r\\n\\r\\n    function gelato() external view returns (address payable);\\r\\n\\r\\n    function taskModuleAddresses(Module) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IProxyModule {\\r\\n    function opsProxyFactory() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IOpsProxyFactory {\\r\\n    function getProxyOf(address account) external view returns (address, bool);\\r\\n}\\r\\n\\r\\ninterface IGelato1Balance {\\r\\n    function depositNative(address _sponsor) external payable;\\r\\n\\r\\n    function depositToken(\\r\\n        address _sponsor,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IGelato {\\r\\n    function feeCollector() external view returns (address);\\r\\n}\",\"keccak256\":\"0xb6c727208aa4f4f1d797051ea99a8fd5de0a1d0bab423f6d2bf8118cfbc8d5b9\",\"license\":\"UNLICENSED\"},\"contracts/GelatoSecretsContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\r\\nimport \\\"./GelatoAutomate/AutomateTaskCreator.sol\\\";\\r\\n\\r\\n//solhint-disable no-empty-blocks\\r\\n//solhint-disable not-rely-on-time\\r\\n\\r\\ncontract GelatoSecretsContract is AutomateTaskCreator, ERC165, IERC1271 {\\r\\n\\r\\n    using ECDSA for bytes32;\\r\\n    using MessageHashUtils for bytes32;\\r\\n\\r\\n    uint256 public count;\\r\\n    uint256 public lastExecuted;\\r\\n    bytes32 public taskId;\\r\\n    uint256 public constant MAX_COUNT = 5;\\r\\n    uint256 public constant INTERVAL = 20 * 60 * 1000; // 20 minutes in milliseconds\\r\\n\\r\\n    address public trustedSigner;\\r\\n\\r\\n    event CounterTaskCreated(bytes32 taskId);\\r\\n\\r\\n    constructor(address _automate, address _trustedSigner) AutomateTaskCreator(_automate) {\\r\\n        trustedSigner = _trustedSigner;\\r\\n    }\\r\\n\\r\\n    function createTask(\\r\\n        string memory _web3FunctionHash,\\r\\n        bytes calldata _web3FunctionArgsHex\\r\\n    ) external {\\r\\n        require(taskId == bytes32(\\\"\\\"), \\\"Already started task\\\");\\r\\n\\r\\n        bytes memory execData = abi.encodeCall(this.increaseCount, (1));\\r\\n\\r\\n        ModuleData memory moduleData = ModuleData({\\r\\n            modules: new Module[](3),\\r\\n            args: new bytes[](3)\\r\\n        });\\r\\n        moduleData.modules[0] = Module.PROXY;\\r\\n        moduleData.modules[1] = Module.WEB3_FUNCTION;\\r\\n        moduleData.modules[2] = Module.TRIGGER;\\r\\n\\r\\n        moduleData.args[0] = _proxyModuleArg();\\r\\n        moduleData.args[1] = _web3FunctionModuleArg(\\r\\n            _web3FunctionHash,\\r\\n            _web3FunctionArgsHex\\r\\n        );\\r\\n\\r\\n        moduleData.args[2] = _timeTriggerModuleArg(\\r\\n            uint128(block.timestamp + INTERVAL),\\r\\n            uint128(INTERVAL)\\r\\n        );\\r\\n\\r\\n        bytes32 id = _createTask(\\r\\n            address(this),\\r\\n            execData,\\r\\n            moduleData,\\r\\n            address(0)\\r\\n        );\\r\\n\\r\\n        taskId = id;\\r\\n        emit CounterTaskCreated(id);\\r\\n    }\\r\\n\\r\\n    function cancelTask() external {\\r\\n        require(taskId != bytes32(\\\"\\\"), \\\"Task not started\\\");\\r\\n        _cancelTask(taskId);\\r\\n    }\\r\\n\\r\\n    function increaseCount(uint256 _amount) external onlyDedicatedMsgSender {\\r\\n        uint256 newCount = count + _amount;\\r\\n\\r\\n        if (newCount >= MAX_COUNT) {\\r\\n            _cancelTask(taskId);\\r\\n            count = 0;\\r\\n        } else {\\r\\n            count += _amount;\\r\\n            lastExecuted = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositFunds(uint256 _amount, address _token) external payable {\\r\\n        _depositFunds1Balance(_amount, _token, address(this));\\r\\n    }\\r\\n\\r\\n    // EIP-1271 implementation\\r\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view override returns (bytes4) {\\r\\n        // Remove the toEthSignedMessageHash call\\r\\n        address recoveredSigner = ECDSA.recover(hash, signature);\\r\\n        // Check if the recovered signer matches the trusted signer\\r\\n        if (recoveredSigner == trustedSigner) {\\r\\n            return this.isValidSignature.selector; // Return the magic value 0x1626ba7e\\r\\n        } else {\\r\\n            return 0xffffffff; // Return invalid signature value\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Override supportsInterface to support ERC165\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC1271).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x412f855ebcb687da36bca94dedd280e6f1d409113881acdfe4527f8b59f1885f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620027da380380620027da8339818101604052810190620000379190620003ef565b8180308173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060008273ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e291906200047b565b90508073ffffffffffffffffffffffffffffffffffffffff1663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001569190620004ad565b73ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505060008373ffffffffffffffffffffffffffffffffffffffff1663cd3d4fb960026040518263ffffffff1660e01b8152600401620001c791906200055f565b602060405180830381865afa158015620001e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020b9190620004ad565b905060008173ffffffffffffffffffffffffffffffffffffffff1663ba1d0ff46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200025b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002819190620004ad565b90508073ffffffffffffffffffffffffffffffffffffffff1663ded89a7c856040518263ffffffff1660e01b8152600401620002be91906200058d565b6040805180830381865afa158015620002db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003019190620005e7565b508073ffffffffffffffffffffffffffffffffffffffff1660a09073ffffffffffffffffffffffffffffffffffffffff168152505050505050505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200062e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003b7826200038a565b9050919050565b620003c981620003aa565b8114620003d557600080fd5b50565b600081519050620003e981620003be565b92915050565b6000806040838503121562000409576200040862000385565b5b60006200041985828601620003d8565b92505060206200042c85828601620003d8565b9150509250929050565b600062000443826200038a565b9050919050565b620004558162000436565b81146200046157600080fd5b50565b60008151905062000475816200044a565b92915050565b60006020828403121562000494576200049362000385565b5b6000620004a48482850162000464565b91505092915050565b600060208284031215620004c657620004c562000385565b5b6000620004d684828501620003d8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110620005225762000521620004df565b5b50565b600081905062000535826200050e565b919050565b6000620005478262000525565b9050919050565b62000559816200053a565b82525050565b60006020820190506200057660008301846200054e565b92915050565b6200058781620003aa565b82525050565b6000602082019050620005a460008301846200057c565b92915050565b60008115159050919050565b620005c181620005aa565b8114620005cd57600080fd5b50565b600081519050620005e181620005b6565b92915050565b6000806040838503121562000601576200060062000385565b5b60006200061185828601620003d8565b92505060206200062485828601620005d0565b9150509250929050565b60805160a05160c05161216a6200067060003960005050600081816104a101526104cb0152600081816103eb01528181610a730152610b9a015261216a6000f3fe6080604052600436106100e85760003560e01c806346d4adf21161008a57806389facb201161005957806389facb20146102e6578063f74d548014610311578063f785de231461033c578063f7d9ae7314610358576100e8565b806346d4adf21461023e57806357fb1d671461026757806377163c1d146102925780638136659f146102bd576100e8565b80631626ba7e116100c65780631626ba7e146101805780631c15ff77146101bd57806328f150eb146101e85780633322b23d14610213576100e8565b806301ffc9a7146100ed578063049aacfe1461012a57806306661abd14610155575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f919061121d565b61036f565b6040516101219190611265565b60405180910390f35b34801561013657600080fd5b5061013f6103e9565b60405161014c91906112ff565b60405180910390f35b34801561016157600080fd5b5061016a61040d565b6040516101779190611333565b60405180910390f35b34801561018c57600080fd5b506101a760048036038101906101a291906114ca565b610413565b6040516101b49190611535565b60405180910390f35b3480156101c957600080fd5b506101d2610499565b6040516101df9190611333565b60405180910390f35b3480156101f457600080fd5b506101fd61049f565b60405161020a9190611571565b60405180910390f35b34801561021f57600080fd5b506102286104c3565b604051610235919061159b565b60405180910390f35b34801561024a57600080fd5b50610265600480360381019061026091906115e2565b6104c9565b005b34801561027357600080fd5b5061027c6105ac565b6040516102899190611630565b60405180910390f35b34801561029e57600080fd5b506102a76105c4565b6040516102b49190611333565b60405180910390f35b3480156102c957600080fd5b506102e460048036038101906102df919061174c565b6105c9565b005b3480156102f257600080fd5b506102fb61094a565b6040516103089190611333565b60405180910390f35b34801561031d57600080fd5b50610326610951565b6040516103339190611571565b60405180910390f35b610356600480360381019061035191906117f4565b610977565b005b34801561036457600080fd5b5061036d610986565b005b60007f1626ba7e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e257506103e1826109db565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005481565b6000806104208484610a45565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361048757631626ba7e60e01b915050610493565b63ffffffff60e01b9150505b92915050565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611891565b60405180910390fd5b60008160005461056791906118e0565b9050600581106105885761057c600254610a71565b600080819055506105a8565b8160008082825461059991906118e0565b92505081905550426001819055505b5050565b737506c12a824d73d9b08564d5afc22c949434755e81565b600581565b600080191660025414610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890611960565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff166346d4adf2600160405160240161064191906119bb565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006040518060400160405280600367ffffffffffffffff8111156106ad576106ac61139f565b5b6040519080825280602002602001820160405280156106db5781602001602082028036833780820191505090505b508152602001600367ffffffffffffffff8111156106fc576106fb61139f565b5b60405190808252806020026020018201604052801561072f57816020015b606081526020019060019003908161071a5790505b5081525090506002816000015160008151811061074f5761074e6119d6565b5b6020026020010190600581111561076957610768611a05565b5b9081600581111561077d5761077c611a05565b5b815250506004816000015160018151811061079b5761079a6119d6565b5b602002602001019060058111156107b5576107b4611a05565b5b908160058111156107c9576107c8611a05565b5b81525050600581600001516002815181106107e7576107e66119d6565b5b6020026020010190600581111561080157610800611a05565b5b9081600581111561081557610814611a05565b5b81525050610821610aff565b8160200151600081518110610839576108386119d6565b5b60200260200101819052506108928585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610b16565b81602001516001815181106108aa576108a96119d6565b5b60200260200101819052506108d062124f80426108c791906118e0565b62124f80610b42565b81602001516002815181106108e8576108e76119d6565b5b602002602001018190525060006109023084846000610b96565b9050806002819055507fa585557108354aa3685e5fe0424ad88ab5bcabc78119a3d599ae901ccb1999938160405161093a919061159b565b60405180910390a1505050505050565b62124f8081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610982828230610c44565b5050565b6000801916600254036109ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c590611a80565b60405180910390fd5b6109d9600254610a71565b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600080610a558686610efd565b925092509250610a658282610f59565b82935050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ee8ca3b5826040518263ffffffff1660e01b8152600401610aca919061159b565b600060405180830381600087803b158015610ae457600080fd5b505af1158015610af8573d6000803e3d6000fd5b5050505050565b606060405180602001604052806000815250905090565b60608282604051602001610b2b929190611b63565b604051602081830303815290604052905092915050565b606060008383604051602001610b59929190611bc5565b6040516020818303038152906040529050600081604051602001610b7e929190611c36565b60405160208183030381529060405291505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633323b467868686866040518563ffffffff1660e01b8152600401610bf79493929190611ead565b6020604051808303816000875af1158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190611f15565b9050949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d535760054614610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611f8e565b60405180910390fd5b737506c12a824d73d9b08564d5afc22c949434755e73ffffffffffffffffffffffffffffffffffffffff166333bb7f9184836040518363ffffffff1660e01b8152600401610d1c9190611571565b6000604051808303818588803b158015610d3557600080fd5b505af1158015610d49573d6000803e3d6000fd5b5050505050610ef8565b608946148015610da25750732791bca1f2de4661ed88a30c99a7a9449aa8417473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd890611ffa565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737506c12a824d73d9b08564d5afc22c949434755e856040518363ffffffff1660e01b8152600401610e3092919061201a565b6020604051808303816000875af1158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e73919061206f565b50737506c12a824d73d9b08564d5afc22c949434755e73ffffffffffffffffffffffffffffffffffffffff1663fb0f97a88284866040518463ffffffff1660e01b8152600401610ec59392919061209c565b600060405180830381600087803b158015610edf57600080fd5b505af1158015610ef3573d6000803e3d6000fd5b505050505b505050565b60008060006041845103610f425760008060006020870151925060408701519150606087015160001a9050610f34888285856110bd565b955095509550505050610f52565b60006002855160001b9250925092505b9250925092565b60006003811115610f6d57610f6c611a05565b5b826003811115610f8057610f7f611a05565b5b03156110b95760016003811115610f9a57610f99611a05565b5b826003811115610fad57610fac611a05565b5b03610fe4576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115610ff857610ff7611a05565b5b82600381111561100b5761100a611a05565b5b03611050578060001c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016110479190611333565b60405180910390fd5b60038081111561106357611062611a05565b5b82600381111561107657611075611a05565b5b036110b857806040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004016110af919061159b565b60405180910390fd5b5b5050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c11156110fd5760006003859250925092506111a7565b60006001888888886040516000815260200160405260405161112294939291906120ef565b6020604051602081039080840390855afa158015611144573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361119857600060016000801b935093509350506111a7565b8060008060001b935093509350505b9450945094915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6111fa816111c5565b811461120557600080fd5b50565b600081359050611217816111f1565b92915050565b600060208284031215611233576112326111bb565b5b600061124184828501611208565b91505092915050565b60008115159050919050565b61125f8161124a565b82525050565b600060208201905061127a6000830184611256565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006112c56112c06112bb84611280565b6112a0565b611280565b9050919050565b60006112d7826112aa565b9050919050565b60006112e9826112cc565b9050919050565b6112f9816112de565b82525050565b600060208201905061131460008301846112f0565b92915050565b6000819050919050565b61132d8161131a565b82525050565b60006020820190506113486000830184611324565b92915050565b6000819050919050565b6113618161134e565b811461136c57600080fd5b50565b60008135905061137e81611358565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113d78261138e565b810181811067ffffffffffffffff821117156113f6576113f561139f565b5b80604052505050565b60006114096111b1565b905061141582826113ce565b919050565b600067ffffffffffffffff8211156114355761143461139f565b5b61143e8261138e565b9050602081019050919050565b82818337600083830152505050565b600061146d6114688461141a565b6113ff565b90508281526020810184848401111561148957611488611389565b5b61149484828561144b565b509392505050565b600082601f8301126114b1576114b0611384565b5b81356114c184826020860161145a565b91505092915050565b600080604083850312156114e1576114e06111bb565b5b60006114ef8582860161136f565b925050602083013567ffffffffffffffff8111156115105761150f6111c0565b5b61151c8582860161149c565b9150509250929050565b61152f816111c5565b82525050565b600060208201905061154a6000830184611526565b92915050565b600061155b82611280565b9050919050565b61156b81611550565b82525050565b60006020820190506115866000830184611562565b92915050565b6115958161134e565b82525050565b60006020820190506115b0600083018461158c565b92915050565b6115bf8161131a565b81146115ca57600080fd5b50565b6000813590506115dc816115b6565b92915050565b6000602082840312156115f8576115f76111bb565b5b6000611606848285016115cd565b91505092915050565b600061161a826112cc565b9050919050565b61162a8161160f565b82525050565b60006020820190506116456000830184611621565b92915050565b600067ffffffffffffffff8211156116665761166561139f565b5b61166f8261138e565b9050602081019050919050565b600061168f61168a8461164b565b6113ff565b9050828152602081018484840111156116ab576116aa611389565b5b6116b684828561144b565b509392505050565b600082601f8301126116d3576116d2611384565b5b81356116e384826020860161167c565b91505092915050565b600080fd5b600080fd5b60008083601f84011261170c5761170b611384565b5b8235905067ffffffffffffffff811115611729576117286116ec565b5b602083019150836001820283011115611745576117446116f1565b5b9250929050565b600080600060408486031215611765576117646111bb565b5b600084013567ffffffffffffffff811115611783576117826111c0565b5b61178f868287016116be565b935050602084013567ffffffffffffffff8111156117b0576117af6111c0565b5b6117bc868287016116f6565b92509250509250925092565b6117d181611550565b81146117dc57600080fd5b50565b6000813590506117ee816117c8565b92915050565b6000806040838503121561180b5761180a6111bb565b5b6000611819858286016115cd565b925050602061182a858286016117df565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920646564696361746564206d73672e73656e64657200000000000000600082015250565b600061187b601983611834565b915061188682611845565b602082019050919050565b600060208201905081810360008301526118aa8161186e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118eb8261131a565b91506118f68361131a565b925082820190508082111561190e5761190d6118b1565b5b92915050565b7f416c72656164792073746172746564207461736b000000000000000000000000600082015250565b600061194a601483611834565b915061195582611914565b602082019050919050565b600060208201905081810360008301526119798161193d565b9050919050565b6000819050919050565b60006119a56119a061199b84611980565b6112a0565b61131a565b9050919050565b6119b58161198a565b82525050565b60006020820190506119d060008301846119ac565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f5461736b206e6f74207374617274656400000000000000000000000000000000600082015250565b6000611a6a601083611834565b9150611a7582611a34565b602082019050919050565b60006020820190508181036000830152611a9981611a5d565b9050919050565b600081519050919050565b60005b83811015611ac9578082015181840152602081019050611aae565b60008484015250505050565b6000611ae082611aa0565b611aea8185611834565b9350611afa818560208601611aab565b611b038161138e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000611b3582611b0e565b611b3f8185611b19565b9350611b4f818560208601611aab565b611b588161138e565b840191505092915050565b60006040820190508181036000830152611b7d8185611ad5565b90508181036020830152611b918184611b2a565b90509392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611bbf81611b9a565b82525050565b6000604082019050611bda6000830185611bb6565b611be76020830184611bb6565b9392505050565b60048110611bff57611bfe611a05565b5b50565b6000819050611c1082611bee565b919050565b6000611c2082611c02565b9050919050565b611c3081611c15565b82525050565b6000604082019050611c4b6000830185611c27565b8181036020830152611c5d8184611b2a565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60068110611ca357611ca2611a05565b5b50565b6000819050611cb482611c92565b919050565b6000611cc482611ca6565b9050919050565b611cd481611cb9565b82525050565b6000611ce68383611ccb565b60208301905092915050565b6000602082019050919050565b6000611d0a82611c66565b611d148185611c71565b9350611d1f83611c82565b8060005b83811015611d50578151611d378882611cda565b9750611d4283611cf2565b925050600181019050611d23565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611da582611b0e565b611daf8185611d89565b9350611dbf818560208601611aab565b611dc88161138e565b840191505092915050565b6000611ddf8383611d9a565b905092915050565b6000602082019050919050565b6000611dff82611d5d565b611e098185611d68565b935083602082028501611e1b85611d79565b8060005b85811015611e575784840389528151611e388582611dd3565b9450611e4383611de7565b925060208a01995050600181019050611e1f565b50829750879550505050505092915050565b60006040830160008301518482036000860152611e868282611cff565b91505060208301518482036020860152611ea08282611df4565b9150508091505092915050565b6000608082019050611ec26000830187611562565b8181036020830152611ed48186611b2a565b90508181036040830152611ee88185611e69565b9050611ef76060830184611562565b95945050505050565b600081519050611f0f81611358565b92915050565b600060208284031215611f2b57611f2a6111bb565b5b6000611f3984828501611f00565b91505092915050565b7f4f6e6c79206465706f73697420455448206f6e20676f65726c69000000000000600082015250565b6000611f78601a83611834565b9150611f8382611f42565b602082019050919050565b60006020820190508181036000830152611fa781611f6b565b9050919050565b7f4f6e6c79206465706f7369742055534443206f6e20706f6c79676f6e00000000600082015250565b6000611fe4601c83611834565b9150611fef82611fae565b602082019050919050565b6000602082019050818103600083015261201381611fd7565b9050919050565b600060408201905061202f6000830185611562565b61203c6020830184611324565b9392505050565b61204c8161124a565b811461205757600080fd5b50565b60008151905061206981612043565b92915050565b600060208284031215612085576120846111bb565b5b60006120938482850161205a565b91505092915050565b60006060820190506120b16000830186611562565b6120be6020830185611562565b6120cb6040830184611324565b949350505050565b600060ff82169050919050565b6120e9816120d3565b82525050565b6000608082019050612104600083018761158c565b61211160208301866120e0565b61211e604083018561158c565b61212b606083018461158c565b9594505050505056fea2646970667358221220e721b798bd17d54dc83382a01269110847e1a97a33a1513be97313b2397421fe64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c806346d4adf21161008a57806389facb201161005957806389facb20146102e6578063f74d548014610311578063f785de231461033c578063f7d9ae7314610358576100e8565b806346d4adf21461023e57806357fb1d671461026757806377163c1d146102925780638136659f146102bd576100e8565b80631626ba7e116100c65780631626ba7e146101805780631c15ff77146101bd57806328f150eb146101e85780633322b23d14610213576100e8565b806301ffc9a7146100ed578063049aacfe1461012a57806306661abd14610155575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f919061121d565b61036f565b6040516101219190611265565b60405180910390f35b34801561013657600080fd5b5061013f6103e9565b60405161014c91906112ff565b60405180910390f35b34801561016157600080fd5b5061016a61040d565b6040516101779190611333565b60405180910390f35b34801561018c57600080fd5b506101a760048036038101906101a291906114ca565b610413565b6040516101b49190611535565b60405180910390f35b3480156101c957600080fd5b506101d2610499565b6040516101df9190611333565b60405180910390f35b3480156101f457600080fd5b506101fd61049f565b60405161020a9190611571565b60405180910390f35b34801561021f57600080fd5b506102286104c3565b604051610235919061159b565b60405180910390f35b34801561024a57600080fd5b50610265600480360381019061026091906115e2565b6104c9565b005b34801561027357600080fd5b5061027c6105ac565b6040516102899190611630565b60405180910390f35b34801561029e57600080fd5b506102a76105c4565b6040516102b49190611333565b60405180910390f35b3480156102c957600080fd5b506102e460048036038101906102df919061174c565b6105c9565b005b3480156102f257600080fd5b506102fb61094a565b6040516103089190611333565b60405180910390f35b34801561031d57600080fd5b50610326610951565b6040516103339190611571565b60405180910390f35b610356600480360381019061035191906117f4565b610977565b005b34801561036457600080fd5b5061036d610986565b005b60007f1626ba7e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103e257506103e1826109db565b5b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005481565b6000806104208484610a45565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361048757631626ba7e60e01b915050610493565b63ffffffff60e01b9150505b92915050565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90611891565b60405180910390fd5b60008160005461056791906118e0565b9050600581106105885761057c600254610a71565b600080819055506105a8565b8160008082825461059991906118e0565b92505081905550426001819055505b5050565b737506c12a824d73d9b08564d5afc22c949434755e81565b600581565b600080191660025414610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890611960565b60405180910390fd5b60003073ffffffffffffffffffffffffffffffffffffffff166346d4adf2600160405160240161064191906119bb565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006040518060400160405280600367ffffffffffffffff8111156106ad576106ac61139f565b5b6040519080825280602002602001820160405280156106db5781602001602082028036833780820191505090505b508152602001600367ffffffffffffffff8111156106fc576106fb61139f565b5b60405190808252806020026020018201604052801561072f57816020015b606081526020019060019003908161071a5790505b5081525090506002816000015160008151811061074f5761074e6119d6565b5b6020026020010190600581111561076957610768611a05565b5b9081600581111561077d5761077c611a05565b5b815250506004816000015160018151811061079b5761079a6119d6565b5b602002602001019060058111156107b5576107b4611a05565b5b908160058111156107c9576107c8611a05565b5b81525050600581600001516002815181106107e7576107e66119d6565b5b6020026020010190600581111561080157610800611a05565b5b9081600581111561081557610814611a05565b5b81525050610821610aff565b8160200151600081518110610839576108386119d6565b5b60200260200101819052506108928585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610b16565b81602001516001815181106108aa576108a96119d6565b5b60200260200101819052506108d062124f80426108c791906118e0565b62124f80610b42565b81602001516002815181106108e8576108e76119d6565b5b602002602001018190525060006109023084846000610b96565b9050806002819055507fa585557108354aa3685e5fe0424ad88ab5bcabc78119a3d599ae901ccb1999938160405161093a919061159b565b60405180910390a1505050505050565b62124f8081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610982828230610c44565b5050565b6000801916600254036109ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c590611a80565b60405180910390fd5b6109d9600254610a71565b565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080600080610a558686610efd565b925092509250610a658282610f59565b82935050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ee8ca3b5826040518263ffffffff1660e01b8152600401610aca919061159b565b600060405180830381600087803b158015610ae457600080fd5b505af1158015610af8573d6000803e3d6000fd5b5050505050565b606060405180602001604052806000815250905090565b60608282604051602001610b2b929190611b63565b604051602081830303815290604052905092915050565b606060008383604051602001610b59929190611bc5565b6040516020818303038152906040529050600081604051602001610b7e929190611c36565b60405160208183030381529060405291505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633323b467868686866040518563ffffffff1660e01b8152600401610bf79493929190611ead565b6020604051808303816000875af1158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190611f15565b9050949350505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d535760054614610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611f8e565b60405180910390fd5b737506c12a824d73d9b08564d5afc22c949434755e73ffffffffffffffffffffffffffffffffffffffff166333bb7f9184836040518363ffffffff1660e01b8152600401610d1c9190611571565b6000604051808303818588803b158015610d3557600080fd5b505af1158015610d49573d6000803e3d6000fd5b5050505050610ef8565b608946148015610da25750732791bca1f2de4661ed88a30c99a7a9449aa8417473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd890611ffa565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737506c12a824d73d9b08564d5afc22c949434755e856040518363ffffffff1660e01b8152600401610e3092919061201a565b6020604051808303816000875af1158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e73919061206f565b50737506c12a824d73d9b08564d5afc22c949434755e73ffffffffffffffffffffffffffffffffffffffff1663fb0f97a88284866040518463ffffffff1660e01b8152600401610ec59392919061209c565b600060405180830381600087803b158015610edf57600080fd5b505af1158015610ef3573d6000803e3d6000fd5b505050505b505050565b60008060006041845103610f425760008060006020870151925060408701519150606087015160001a9050610f34888285856110bd565b955095509550505050610f52565b60006002855160001b9250925092505b9250925092565b60006003811115610f6d57610f6c611a05565b5b826003811115610f8057610f7f611a05565b5b03156110b95760016003811115610f9a57610f99611a05565b5b826003811115610fad57610fac611a05565b5b03610fe4576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115610ff857610ff7611a05565b5b82600381111561100b5761100a611a05565b5b03611050578060001c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016110479190611333565b60405180910390fd5b60038081111561106357611062611a05565b5b82600381111561107657611075611a05565b5b036110b857806040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004016110af919061159b565b60405180910390fd5b5b5050565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c11156110fd5760006003859250925092506111a7565b60006001888888886040516000815260200160405260405161112294939291906120ef565b6020604051602081039080840390855afa158015611144573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361119857600060016000801b935093509350506111a7565b8060008060001b935093509350505b9450945094915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6111fa816111c5565b811461120557600080fd5b50565b600081359050611217816111f1565b92915050565b600060208284031215611233576112326111bb565b5b600061124184828501611208565b91505092915050565b60008115159050919050565b61125f8161124a565b82525050565b600060208201905061127a6000830184611256565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006112c56112c06112bb84611280565b6112a0565b611280565b9050919050565b60006112d7826112aa565b9050919050565b60006112e9826112cc565b9050919050565b6112f9816112de565b82525050565b600060208201905061131460008301846112f0565b92915050565b6000819050919050565b61132d8161131a565b82525050565b60006020820190506113486000830184611324565b92915050565b6000819050919050565b6113618161134e565b811461136c57600080fd5b50565b60008135905061137e81611358565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6113d78261138e565b810181811067ffffffffffffffff821117156113f6576113f561139f565b5b80604052505050565b60006114096111b1565b905061141582826113ce565b919050565b600067ffffffffffffffff8211156114355761143461139f565b5b61143e8261138e565b9050602081019050919050565b82818337600083830152505050565b600061146d6114688461141a565b6113ff565b90508281526020810184848401111561148957611488611389565b5b61149484828561144b565b509392505050565b600082601f8301126114b1576114b0611384565b5b81356114c184826020860161145a565b91505092915050565b600080604083850312156114e1576114e06111bb565b5b60006114ef8582860161136f565b925050602083013567ffffffffffffffff8111156115105761150f6111c0565b5b61151c8582860161149c565b9150509250929050565b61152f816111c5565b82525050565b600060208201905061154a6000830184611526565b92915050565b600061155b82611280565b9050919050565b61156b81611550565b82525050565b60006020820190506115866000830184611562565b92915050565b6115958161134e565b82525050565b60006020820190506115b0600083018461158c565b92915050565b6115bf8161131a565b81146115ca57600080fd5b50565b6000813590506115dc816115b6565b92915050565b6000602082840312156115f8576115f76111bb565b5b6000611606848285016115cd565b91505092915050565b600061161a826112cc565b9050919050565b61162a8161160f565b82525050565b60006020820190506116456000830184611621565b92915050565b600067ffffffffffffffff8211156116665761166561139f565b5b61166f8261138e565b9050602081019050919050565b600061168f61168a8461164b565b6113ff565b9050828152602081018484840111156116ab576116aa611389565b5b6116b684828561144b565b509392505050565b600082601f8301126116d3576116d2611384565b5b81356116e384826020860161167c565b91505092915050565b600080fd5b600080fd5b60008083601f84011261170c5761170b611384565b5b8235905067ffffffffffffffff811115611729576117286116ec565b5b602083019150836001820283011115611745576117446116f1565b5b9250929050565b600080600060408486031215611765576117646111bb565b5b600084013567ffffffffffffffff811115611783576117826111c0565b5b61178f868287016116be565b935050602084013567ffffffffffffffff8111156117b0576117af6111c0565b5b6117bc868287016116f6565b92509250509250925092565b6117d181611550565b81146117dc57600080fd5b50565b6000813590506117ee816117c8565b92915050565b6000806040838503121561180b5761180a6111bb565b5b6000611819858286016115cd565b925050602061182a858286016117df565b9150509250929050565b600082825260208201905092915050565b7f4f6e6c7920646564696361746564206d73672e73656e64657200000000000000600082015250565b600061187b601983611834565b915061188682611845565b602082019050919050565b600060208201905081810360008301526118aa8161186e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118eb8261131a565b91506118f68361131a565b925082820190508082111561190e5761190d6118b1565b5b92915050565b7f416c72656164792073746172746564207461736b000000000000000000000000600082015250565b600061194a601483611834565b915061195582611914565b602082019050919050565b600060208201905081810360008301526119798161193d565b9050919050565b6000819050919050565b60006119a56119a061199b84611980565b6112a0565b61131a565b9050919050565b6119b58161198a565b82525050565b60006020820190506119d060008301846119ac565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f5461736b206e6f74207374617274656400000000000000000000000000000000600082015250565b6000611a6a601083611834565b9150611a7582611a34565b602082019050919050565b60006020820190508181036000830152611a9981611a5d565b9050919050565b600081519050919050565b60005b83811015611ac9578082015181840152602081019050611aae565b60008484015250505050565b6000611ae082611aa0565b611aea8185611834565b9350611afa818560208601611aab565b611b038161138e565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000611b3582611b0e565b611b3f8185611b19565b9350611b4f818560208601611aab565b611b588161138e565b840191505092915050565b60006040820190508181036000830152611b7d8185611ad5565b90508181036020830152611b918184611b2a565b90509392505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611bbf81611b9a565b82525050565b6000604082019050611bda6000830185611bb6565b611be76020830184611bb6565b9392505050565b60048110611bff57611bfe611a05565b5b50565b6000819050611c1082611bee565b919050565b6000611c2082611c02565b9050919050565b611c3081611c15565b82525050565b6000604082019050611c4b6000830185611c27565b8181036020830152611c5d8184611b2a565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60068110611ca357611ca2611a05565b5b50565b6000819050611cb482611c92565b919050565b6000611cc482611ca6565b9050919050565b611cd481611cb9565b82525050565b6000611ce68383611ccb565b60208301905092915050565b6000602082019050919050565b6000611d0a82611c66565b611d148185611c71565b9350611d1f83611c82565b8060005b83811015611d50578151611d378882611cda565b9750611d4283611cf2565b925050600181019050611d23565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611da582611b0e565b611daf8185611d89565b9350611dbf818560208601611aab565b611dc88161138e565b840191505092915050565b6000611ddf8383611d9a565b905092915050565b6000602082019050919050565b6000611dff82611d5d565b611e098185611d68565b935083602082028501611e1b85611d79565b8060005b85811015611e575784840389528151611e388582611dd3565b9450611e4383611de7565b925060208a01995050600181019050611e1f565b50829750879550505050505092915050565b60006040830160008301518482036000860152611e868282611cff565b91505060208301518482036020860152611ea08282611df4565b9150508091505092915050565b6000608082019050611ec26000830187611562565b8181036020830152611ed48186611b2a565b90508181036040830152611ee88185611e69565b9050611ef76060830184611562565b95945050505050565b600081519050611f0f81611358565b92915050565b600060208284031215611f2b57611f2a6111bb565b5b6000611f3984828501611f00565b91505092915050565b7f4f6e6c79206465706f73697420455448206f6e20676f65726c69000000000000600082015250565b6000611f78601a83611834565b9150611f8382611f42565b602082019050919050565b60006020820190508181036000830152611fa781611f6b565b9050919050565b7f4f6e6c79206465706f7369742055534443206f6e20706f6c79676f6e00000000600082015250565b6000611fe4601c83611834565b9150611fef82611fae565b602082019050919050565b6000602082019050818103600083015261201381611fd7565b9050919050565b600060408201905061202f6000830185611562565b61203c6020830184611324565b9392505050565b61204c8161124a565b811461205757600080fd5b50565b60008151905061206981612043565b92915050565b600060208284031215612085576120846111bb565b5b60006120938482850161205a565b91505092915050565b60006060820190506120b16000830186611562565b6120be6020830185611562565b6120cb6040830184611324565b949350505050565b600060ff82169050919050565b6120e9816120d3565b82525050565b6000608082019050612104600083018761158c565b61211160208301866120e0565b61211e604083018561158c565b61212b606083018461158c565b9594505050505056fea2646970667358221220e721b798bd17d54dc83382a01269110847e1a97a33a1513be97313b2397421fe64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "isValidSignature(bytes32,bytes)": {
        "details": "Should return whether the signature provided is valid for the provided data",
        "params": {
          "hash": "Hash of the data to be signed",
          "signature": "Signature byte array associated with _data"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3101,
        "contract": "contracts/GelatoSecretsContract.sol:GelatoSecretsContract",
        "label": "count",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3103,
        "contract": "contracts/GelatoSecretsContract.sol:GelatoSecretsContract",
        "label": "lastExecuted",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3105,
        "contract": "contracts/GelatoSecretsContract.sol:GelatoSecretsContract",
        "label": "taskId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 3117,
        "contract": "contracts/GelatoSecretsContract.sol:GelatoSecretsContract",
        "label": "trustedSigner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}